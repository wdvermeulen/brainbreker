type Game @model {
  id: ID!
  name: String!
  pin: ID
  currentPage: Int
  pages: [Page!]! @connection(name: "GamePages")
  connectedUsers: [User]! @connection(name: "GameUsers")
  connectedGamemasters: [Gamemaster]! @connection(name: "GameGamemasters")
  connectedTeams: [Team]! @connection(name: "GameTeams")
}

type Page @model {
  id: ID!
  title: String!
  description: String
  hasTimeLimit: Boolean!
  timeLimit: Int
  checkType: CheckType!
  pointsForSpeed: Boolean
  file: String
  questionType: [QuestionType]!
  numberOfOptions: Int
  game: Game! @connection(name: "GamePages")
  answers: [Answer]! @connection(name: "PageAnswers")
}

type Answer @model {
  id: ID!
  Page: Page! @connection(name: "PageAnswers")
  description: String!
  value: Int!
}

type User @model {
  id: ID!
  name: String!
  points: Int
  currentPage: Int
  game: Game! @connection(name: "GameUsers")
  team: Team @connection(name: "TeamUsers")
}

type Team @model {
  id: ID!
  name: String!
  points: Int
  users: [User]! @connection(name: "TeamUsers")
  game: Game! @connection(name: "GameTeams")
}

type Gamemaster @model {
  id: ID!
  game: Game! @connection(name: "GameGamemasters")
}

enum QuestionType {
  MULTIPLE_CHOICE,
  OPEN,
  OPEN_LIST,
  APPROXIMATION,
  ORDER,
  TITLE_CARD,
  PUZZLE,
  VOTE,
}

enum CheckType {
  PREDEFINED_ANSWER,
  GAMEMASTERS_AFTERWARDS,
  USERS_VOTE,
  GAMEMASTERS_VOTE
}
